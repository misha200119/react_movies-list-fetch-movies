{"version":3,"sources":["enums/InputErrors.ts","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api/api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["InputErrors","MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","findFilmByTitle","inpTitle","a","requestLink","fetch","response","json","FindMovie","setMovies","useState","None","error","setError","errorMessage","setErrorMessage","titleTextPattern","setTitleTextPattern","findedMovie","setFindedMovie","findMovie","trim","EmptyField","filmPromise","Response","FilmNotFound","useEffect","CantAddFirstlyFindSomeFilm","FilmAlreadyAdded","Error","method","onSubmit","e","preventDefault","prevValue","undefined","find","film","htmlFor","type","id","placeholder","classNames","value","onChange","target","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a634d94.chunk.js","sourcesContent":["export enum InputErrors {\n  None,\n  EmptyField,\n  FilmNotFound,\n  CantAddFirstlyFindSomeFilm,\n  FilmAlreadyAdded,\n}\n","import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie | null;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return movie ? (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  )\n    : null;\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","const APIKey = 'c82a2951';\nconst APILink = 'https://www.omdbapi.com';\n\nexport const findFilmByTitle = async (inpTitle: string) => {\n  const requestLink = `${APILink}/?apikey=${APIKey}&t=${inpTitle}`;\n  const response = await fetch(requestLink);\n\n  return response.json();\n};\n","/* eslint-disable no-useless-return */\nimport classNames from 'classnames';\nimport React, { FormEvent, useEffect, useState } from 'react';\nimport { InputErrors } from '../../enums/InputErrors';\nimport { findFilmByTitle } from '../../api/api';\nimport { MovieCard } from '../MovieCard';\n\nimport './FindMovie.scss';\n\ntype Props = {\n  setMovies: React.Dispatch<React.SetStateAction<Movie[]>>;\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  setMovies,\n}) => {\n  const [error, setError] = useState(InputErrors.None);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [titleTextPattern, setTitleTextPattern] = useState('');\n  const [findedMovie, setFindedMovie] = useState<Movie | null>(null);\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n\n    if (!findedMovie) {\n      setError(InputErrors.CantAddFirstlyFindSomeFilm);\n\n      return;\n    }\n\n    setMovies(prevValue => {\n      if (prevValue.find(\n        film => film.imdbID === findedMovie.imdbID,\n      ) !== undefined) {\n        setError(InputErrors.FilmAlreadyAdded);\n\n        return prevValue;\n      }\n\n      setFindedMovie(null);\n\n      return [...prevValue, findedMovie];\n    });\n  };\n\n  const findMovie = async () => {\n    if (!titleTextPattern.trim()) {\n      setError(InputErrors.EmptyField);\n\n      return;\n    }\n\n    const filmPromise = await findFilmByTitle(titleTextPattern);\n\n    if (filmPromise.Response === 'False') {\n      setError(InputErrors.FilmNotFound);\n\n      return;\n    }\n\n    setFindedMovie(filmPromise);\n  };\n\n  useEffect(() => {\n    switch (error) {\n      case InputErrors.FilmNotFound:\n        setErrorMessage('*Film not found');\n        break;\n\n      case InputErrors.EmptyField:\n        setErrorMessage('*Enter name in field please!');\n        break;\n\n      case InputErrors.CantAddFirstlyFindSomeFilm:\n        setErrorMessage('*Firstly find some film');\n        break;\n\n      case InputErrors.FilmAlreadyAdded:\n        setErrorMessage('*This film already added');\n        break;\n\n      case InputErrors.None:\n        setErrorMessage('');\n        break;\n\n      default:\n        throw new Error('unexpected inputError');\n    }\n  }, [error]);\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        method=\"post\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames(\n                'input',\n                {\n                  'is-danger': error !== InputErrors.None,\n                },\n              )}\n              value={titleTextPattern}\n              onChange={({ target }) => {\n                setError(InputErrors.None);\n                setTitleTextPattern(target.value);\n              }}\n            />\n          </div>\n\n          {error !== InputErrors.None && (\n            <p className=\"help is-danger\">\n              {errorMessage}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        <MovieCard movie={findedMovie} />\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Array<Movie>>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          setMovies={setMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}